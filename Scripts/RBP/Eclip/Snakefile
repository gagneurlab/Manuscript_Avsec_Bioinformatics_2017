"""
Author: Ziga Avsec
Affiliation: TUM
Goal: Prepare data for modelling from ENCODE .bed eCLIP peaks
Run: snakemake
"""
workdir:
    "../../../"

import os
SRC = "Scripts/RBP/Eclip/"
ECLIP_MODEL_SCRIPTS = ["kmer_glmnet"]

import pandas as pd
dt = pd.read_table("data/eclip/raw/metadata.tsv")
RBPS = pd.Series([x[0] for x in dt[dt.Assembly == "GRCh38"]["Experiment target"].str.split("-")]).unique()

assert len(RBPS) in [112, 150]  # support either the new or the old version

RBP_SUBSET = ["UPF1", "PUM2", "DDX3X", "NKRF", "TARDBP", "SUGP2"]

TRAIN_TYPES = ["train", "valid", "test"]
POSNEG = ["pos", "neg"]
PROC_DIR = "data/eclip/processed"
BASE_DM = os.path.join(PROC_DIR, "design_matrix")
# all scripts
POS_FEATURES = ['tss', 'polya', 'exon_intron', 'intron_exon', 'start_codon',
                'stop_codon', 'gene_start', 'gene_end']
POS_FEATURES_comb = ["tss,gene_start", "polya,gene_end"]
# --------------------------------------------
rule all:
    input:
        "data/eclip/processed/peak_center-gene_mapping_with_sequence.rds",
        BASE_DM + "/meta_info/LARP7.json",
        expand(BASE_DM + "/predictive_models/{eclip_model_script}/{rbp_name}-{position_type}.rds",
               eclip_model_script=ECLIP_MODEL_SCRIPTS,
               position_type=["w_position", "no_position"],
               rbp_name=RBP_SUBSET),
        expand(BASE_DM + "/{train_types}/{rbp_name}_extended.csv",
               rbp_name=RBPS, train_types=TRAIN_TYPES),
        expand(PROC_DIR + "/feature_exclusion_exp/results/{rbp_name}/{exp}-excl-{fset}.json",
               rbp_name=RBPS[:2],
               exp=["DeepNN_scalar_position_ext_gam"],
               fset=POS_FEATURES + POS_FEATURES_comb
               )

# read raw data, clean and generate negative sequences
rule process_raw_data:
    input:
        "data/eclip/raw/metadata.tsv",
        "fasta/gencode.v25.annotation.gtf.rds",
        "fasta7/GRCh38.p7.genome.fa",
        SRC + "0_match_peaks_genes.R"
    output:
        "data/eclip/processed/protein_peak_overlaps.rds",
        "data/eclip/processed/peak_center-gene_mapping.rds"
    script:
        "0_match_peaks_genes.R"

rule append_sequence:
    input:
        "data/eclip/processed/peak_center-gene_mapping.rds",
        "fasta/GRCh38.p7.genome.fa",
        SRC + "1_extract_peak_sequence.R"
    output:
        "data/eclip/processed/peak_center-gene_mapping_with_sequence.rds"
    script:
        "1_extract_peak_sequence.R"

rule create_design_matrix:
    input:
        "data/eclip/processed/peak_center-gene_mapping_with_sequence.rds",
        SRC + "2_create_design_matrix.R"
    output:
        expand("data/eclip/processed/design_matrix/meta_info/{rbp}.json",
               rbp=RBPS),
        expand("data/eclip/processed/design_matrix/train/{rbp}.csv",
               rbp=RBPS),
        expand("data/eclip/processed/design_matrix/valid/{rbp}.csv",
               rbp=RBPS),
        expand("data/eclip/processed/design_matrix/test/{rbp}.csv",
               rbp=RBPS)
    script:
        "2_create_design_matrix.R"

rule create_extended_design_matrix:
    input:
        expand(BASE_DM + "/{train_types}/{rbp_name}.csv", rbp_name=RBPS, train_types=TRAIN_TYPES),
        SRC + "4_append_other_positions.R"
    output:
        # just a single output to not deal with multple ones
        expand(BASE_DM + "/{train_types}/{rbp_name}_extended.csv", rbp_name=RBPS, train_types=TRAIN_TYPES),
    script:
        "4_append_other_positions.R"

# --------------------------------------------
# train models

PROC_DIR = "data/eclip/processed"
rule train_predictive_models:
    input:
        "data/eclip/processed/design_matrix/meta_info/{rbp_name}.json",
        "data/eclip/processed/design_matrix/train/{rbp_name}.csv",
        "data/eclip/processed/design_matrix/valid/{rbp_name}.csv",
        "data/eclip/processed/design_matrix/test/{rbp_name}.csv",
        rscript = SRC + "predictive_models/{eclip_model_script}.R"
    output:
        PROC_DIR + "/design_matrix/predictive_models/{eclip_model_script}/{rbp_name}-{position_type}.rds",
        PROC_DIR + "/predictions/{rbp_name}/{eclip_model_script}-{position_type}.csv"
    shell:
        "{input.rscript} {wildcards.rbp_name} {wildcards.position_type}"


rule train_exclude_features:
    input:
        BASE_DM + "/train/{rbp_name}_extended.csv",
        BASE_DM + "/valid/{rbp_name}_extended.csv",
        BASE_DM + "/test/{rbp_name}_extended.csv",
        pyscript = SRC + "predictive_models/train_exclude_features.py"
    output:
        PROC_DIR + "/feature_exclusion_exp/results/{rbp_name}/{exp}-excl-{fset}.json"
    shell:
        "python {input.pyscript} --rbp={wildcards.rbp_name} --feature_set={wildcards.fset} --exp={wildcards.exp}"
